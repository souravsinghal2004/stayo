generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String             @id @default(uuid())
  clerkUserId      String             @unique
  email            String             @unique
  name             String?
  imageUrl         String?
  phone            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  role             UserRole           @default(USER)
  UserSavedStay    UserSavedStay[]
  UserStayBookings UserStayBookings[]
}

model Property {
  id               String             @id(map: "Stay_pkey") @default(uuid())
  title            String
  location         String
  price            Decimal            @db.Decimal(10, 2)
  images           String[]
  guests           Int
  bedrooms         Int
  bathrooms        Int
  bhk              Int
  description      String
  isWishlisted     Boolean
  status           CarStatus          @default(AVAILABLE)
  createdAt        DateTime           @default(now())
  updatesAt        DateTime           @updatedAt
  UserSavedStay    UserSavedStay[]
  UserStayBookings UserStayBookings[]

  @@index([guests], map: "Stay_guests_idx")
  @@index([isWishlisted], map: "Stay_isWishlisted_idx")
  @@index([location], map: "Stay_location_idx")
  @@index([price], map: "Stay_price_idx")
  @@index([status], map: "Stay_status_idx")
}

model Host {
  id        String   @id @default(uuid())
  name      String
  phone     String   @default("+91 (987) 481-8367")
  email     String   @default("contact@stayo.com")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSavedStay {
  id       String   @id
  userId   String
  stayId   String
  savedAt  DateTime @default(now())
  Property Property @relation(fields: [stayId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stayId])
  @@index([stayId])
  @@index([userId])
}

model UserStayBookings {
  id          String        @id
  stayId      String
  userId      String
  bookingDate DateTime      @db.Date
  startTime   String
  endTime     String
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Property    Property      @relation(fields: [stayId], references: [id])
  User        User          @relation(fields: [userId], references: [id])

  @@index([bookingDate])
  @@index([status])
  @@index([stayId])
  @@index([userId])
}

enum UserRole {
  USER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
  BOOKED
}
